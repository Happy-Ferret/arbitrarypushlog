//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./Hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

var Hbase_enableTable_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_enableTable_args.prototype = {}
Hbase_enableTable_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_enableTable_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_enableTable_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_enableTable_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_enableTable_result.prototype = {}
Hbase_enableTable_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_enableTable_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_enableTable_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_disableTable_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_disableTable_args.prototype = {}
Hbase_disableTable_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_disableTable_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_disableTable_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_disableTable_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_disableTable_result.prototype = {}
Hbase_disableTable_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_disableTable_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_disableTable_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_isTableEnabled_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_isTableEnabled_args.prototype = {}
Hbase_isTableEnabled_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_isTableEnabled_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_isTableEnabled_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_isTableEnabled_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_isTableEnabled_result.prototype = {}
Hbase_isTableEnabled_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_isTableEnabled_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_isTableEnabled_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0)
    output.writeBool(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_compact_args = function(args){
  this.tableNameOrRegionName = null
if( args != null ){  if (null != args.tableNameOrRegionName)
  this.tableNameOrRegionName = args.tableNameOrRegionName
}}
Hbase_compact_args.prototype = {}
Hbase_compact_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_compact_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_compact_args')
  if (null != this.tableNameOrRegionName) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1)
    output.writeString(this.tableNameOrRegionName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_compact_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_compact_result.prototype = {}
Hbase_compact_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_compact_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_compact_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_majorCompact_args = function(args){
  this.tableNameOrRegionName = null
if( args != null ){  if (null != args.tableNameOrRegionName)
  this.tableNameOrRegionName = args.tableNameOrRegionName
}}
Hbase_majorCompact_args.prototype = {}
Hbase_majorCompact_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_majorCompact_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_majorCompact_args')
  if (null != this.tableNameOrRegionName) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1)
    output.writeString(this.tableNameOrRegionName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_majorCompact_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_majorCompact_result.prototype = {}
Hbase_majorCompact_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_majorCompact_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_majorCompact_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getTableNames_args = function(args){
}
Hbase_getTableNames_args.prototype = {}
Hbase_getTableNames_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getTableNames_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getTableNames_args')
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getTableNames_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getTableNames_result.prototype = {}
Hbase_getTableNames_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size16 = 0
          var rtmp3
          this.success = []
          var _etype19 = 0
          rtmp3 = input.readListBegin()
          _etype19 = rtmp3.etype
          _size16 = rtmp3.size
          for (var _i20 = 0; _i20 < _size16; ++_i20)
          {
            var elem21 = null
            elem21 = input.readString()
            this.success.push(elem21)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getTableNames_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getTableNames_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRING, this.success.length)
      {
        for(var iter22 in this.success)
        {
          if (this.success.hasOwnProperty(iter22))
          {
            iter22=this.success[iter22]
            output.writeString(iter22)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getColumnDescriptors_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_getColumnDescriptors_args.prototype = {}
Hbase_getColumnDescriptors_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getColumnDescriptors_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getColumnDescriptors_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getColumnDescriptors_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getColumnDescriptors_result.prototype = {}
Hbase_getColumnDescriptors_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.MAP) {
        {
          var _size23 = 0
          var rtmp3
          this.success = {}
          var _ktype24 = 0
          var _vtype25 = 0
          rtmp3 = input.readMapBegin()
          _ktype24= rtmp3.ktype
          _vtype25= rtmp3.vtype
          _size23= rtmp3.size
          for (var _i27 = 0; _i27 < _size23; ++_i27)
          {
            key28 = null
            val29 = null
            key28 = input.readString()
            val29 = new ttypes.ColumnDescriptor()
            val29.read(input)
            this.success[key28] = val29
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getColumnDescriptors_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getColumnDescriptors_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success))
      {
        for(var kiter30 in this.success)        {
          if (this.success.hasOwnProperty(kiter30))
          {
            var viter31 = this.success[kiter30]
            output.writeString(kiter30)
            viter31.write(output)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getTableRegions_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_getTableRegions_args.prototype = {}
Hbase_getTableRegions_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getTableRegions_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getTableRegions_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getTableRegions_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getTableRegions_result.prototype = {}
Hbase_getTableRegions_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size32 = 0
          var rtmp3
          this.success = []
          var _etype35 = 0
          rtmp3 = input.readListBegin()
          _etype35 = rtmp3.etype
          _size32 = rtmp3.size
          for (var _i36 = 0; _i36 < _size32; ++_i36)
          {
            var elem37 = null
            elem37 = new ttypes.TRegionInfo()
            elem37.read(input)
            this.success.push(elem37)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getTableRegions_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getTableRegions_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter38 in this.success)
        {
          if (this.success.hasOwnProperty(iter38))
          {
            iter38=this.success[iter38]
            iter38.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_createTable_args = function(args){
  this.tableName = null
  this.columnFamilies = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.columnFamilies)
  this.columnFamilies = args.columnFamilies
}}
Hbase_createTable_args.prototype = {}
Hbase_createTable_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size39 = 0
          var rtmp3
          this.columnFamilies = []
          var _etype42 = 0
          rtmp3 = input.readListBegin()
          _etype42 = rtmp3.etype
          _size39 = rtmp3.size
          for (var _i43 = 0; _i43 < _size39; ++_i43)
          {
            var elem44 = null
            elem44 = new ttypes.ColumnDescriptor()
            elem44.read(input)
            this.columnFamilies.push(elem44)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_createTable_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_createTable_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.columnFamilies) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length)
      {
        for(var iter45 in this.columnFamilies)
        {
          if (this.columnFamilies.hasOwnProperty(iter45))
          {
            iter45=this.columnFamilies[iter45]
            iter45.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_createTable_result = function(args){
  this.io = null
  this.ia = null
  this.exist = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
  if (null != args.exist)
  this.exist = args.exist
}}
Hbase_createTable_result.prototype = {}
Hbase_createTable_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists()
        this.exist.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_createTable_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_createTable_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  if (null != this.exist) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3)
    this.exist.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteTable_args = function(args){
  this.tableName = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
}}
Hbase_deleteTable_args.prototype = {}
Hbase_deleteTable_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteTable_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteTable_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteTable_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_deleteTable_result.prototype = {}
Hbase_deleteTable_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteTable_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteTable_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_get_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
}}
Hbase_get_args.prototype = {}
Hbase_get_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_get_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_get_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_get_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_get_result.prototype = {}
Hbase_get_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size46 = 0
          var rtmp3
          this.success = []
          var _etype49 = 0
          rtmp3 = input.readListBegin()
          _etype49 = rtmp3.etype
          _size46 = rtmp3.size
          for (var _i50 = 0; _i50 < _size46; ++_i50)
          {
            var elem51 = null
            elem51 = new ttypes.TCell()
            elem51.read(input)
            this.success.push(elem51)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_get_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_get_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter52 in this.success)
        {
          if (this.success.hasOwnProperty(iter52))
          {
            iter52=this.success[iter52]
            iter52.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getVer_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
  this.numVersions = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
  if (null != args.numVersions)
  this.numVersions = args.numVersions
}}
Hbase_getVer_args.prototype = {}
Hbase_getVer_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getVer_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getVer_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  if (null != this.numVersions) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4)
    output.writeI32(this.numVersions)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getVer_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getVer_result.prototype = {}
Hbase_getVer_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size53 = 0
          var rtmp3
          this.success = []
          var _etype56 = 0
          rtmp3 = input.readListBegin()
          _etype56 = rtmp3.etype
          _size53 = rtmp3.size
          for (var _i57 = 0; _i57 < _size53; ++_i57)
          {
            var elem58 = null
            elem58 = new ttypes.TCell()
            elem58.read(input)
            this.success.push(elem58)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getVer_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getVer_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter59 in this.success)
        {
          if (this.success.hasOwnProperty(iter59))
          {
            iter59=this.success[iter59]
            iter59.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getVerTs_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
  this.timestamp = null
  this.numVersions = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
  if (null != args.timestamp)
  this.timestamp = args.timestamp
  if (null != args.numVersions)
  this.numVersions = args.numVersions
}}
Hbase_getVerTs_args.prototype = {}
Hbase_getVerTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getVerTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getVerTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  if (null != this.numVersions) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5)
    output.writeI32(this.numVersions)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getVerTs_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getVerTs_result.prototype = {}
Hbase_getVerTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size60 = 0
          var rtmp3
          this.success = []
          var _etype63 = 0
          rtmp3 = input.readListBegin()
          _etype63 = rtmp3.etype
          _size60 = rtmp3.size
          for (var _i64 = 0; _i64 < _size60; ++_i64)
          {
            var elem65 = null
            elem65 = new ttypes.TCell()
            elem65.read(input)
            this.success.push(elem65)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getVerTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getVerTs_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter66 in this.success)
        {
          if (this.success.hasOwnProperty(iter66))
          {
            iter66=this.success[iter66]
            iter66.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRow_args = function(args){
  this.tableName = null
  this.row = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
}}
Hbase_getRow_args.prototype = {}
Hbase_getRow_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRow_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRow_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRow_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getRow_result.prototype = {}
Hbase_getRow_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size67 = 0
          var rtmp3
          this.success = []
          var _etype70 = 0
          rtmp3 = input.readListBegin()
          _etype70 = rtmp3.etype
          _size67 = rtmp3.size
          for (var _i71 = 0; _i71 < _size67; ++_i71)
          {
            var elem72 = null
            elem72 = new ttypes.TRowResult()
            elem72.read(input)
            this.success.push(elem72)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRow_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRow_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter73 in this.success)
        {
          if (this.success.hasOwnProperty(iter73))
          {
            iter73=this.success[iter73]
            iter73.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowWithColumns_args = function(args){
  this.tableName = null
  this.row = null
  this.columns = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.columns)
  this.columns = args.columns
}}
Hbase_getRowWithColumns_args.prototype = {}
Hbase_getRowWithColumns_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size74 = 0
          var rtmp3
          this.columns = []
          var _etype77 = 0
          rtmp3 = input.readListBegin()
          _etype77 = rtmp3.etype
          _size74 = rtmp3.size
          for (var _i78 = 0; _i78 < _size74; ++_i78)
          {
            var elem79 = null
            elem79 = input.readString()
            this.columns.push(elem79)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowWithColumns_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowWithColumns_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter80 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter80))
          {
            iter80=this.columns[iter80]
            output.writeString(iter80)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowWithColumns_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getRowWithColumns_result.prototype = {}
Hbase_getRowWithColumns_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size81 = 0
          var rtmp3
          this.success = []
          var _etype84 = 0
          rtmp3 = input.readListBegin()
          _etype84 = rtmp3.etype
          _size81 = rtmp3.size
          for (var _i85 = 0; _i85 < _size81; ++_i85)
          {
            var elem86 = null
            elem86 = new ttypes.TRowResult()
            elem86.read(input)
            this.success.push(elem86)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowWithColumns_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowWithColumns_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter87 in this.success)
        {
          if (this.success.hasOwnProperty(iter87))
          {
            iter87=this.success[iter87]
            iter87.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowTs_args = function(args){
  this.tableName = null
  this.row = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_getRowTs_args.prototype = {}
Hbase_getRowTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowTs_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getRowTs_result.prototype = {}
Hbase_getRowTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size88 = 0
          var rtmp3
          this.success = []
          var _etype91 = 0
          rtmp3 = input.readListBegin()
          _etype91 = rtmp3.etype
          _size88 = rtmp3.size
          for (var _i92 = 0; _i92 < _size88; ++_i92)
          {
            var elem93 = null
            elem93 = new ttypes.TRowResult()
            elem93.read(input)
            this.success.push(elem93)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowTs_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter94 in this.success)
        {
          if (this.success.hasOwnProperty(iter94))
          {
            iter94=this.success[iter94]
            iter94.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowWithColumnsTs_args = function(args){
  this.tableName = null
  this.row = null
  this.columns = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.columns)
  this.columns = args.columns
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_getRowWithColumnsTs_args.prototype = {}
Hbase_getRowWithColumnsTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size95 = 0
          var rtmp3
          this.columns = []
          var _etype98 = 0
          rtmp3 = input.readListBegin()
          _etype98 = rtmp3.etype
          _size95 = rtmp3.size
          for (var _i99 = 0; _i99 < _size95; ++_i99)
          {
            var elem100 = null
            elem100 = input.readString()
            this.columns.push(elem100)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowWithColumnsTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter101 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter101))
          {
            iter101=this.columns[iter101]
            output.writeString(iter101)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_getRowWithColumnsTs_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_getRowWithColumnsTs_result.prototype = {}
Hbase_getRowWithColumnsTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size102 = 0
          var rtmp3
          this.success = []
          var _etype105 = 0
          rtmp3 = input.readListBegin()
          _etype105 = rtmp3.etype
          _size102 = rtmp3.size
          for (var _i106 = 0; _i106 < _size102; ++_i106)
          {
            var elem107 = null
            elem107 = new ttypes.TRowResult()
            elem107.read(input)
            this.success.push(elem107)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_getRowWithColumnsTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter108 in this.success)
        {
          if (this.success.hasOwnProperty(iter108))
          {
            iter108=this.success[iter108]
            iter108.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRow_args = function(args){
  this.tableName = null
  this.row = null
  this.mutations = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.mutations)
  this.mutations = args.mutations
}}
Hbase_mutateRow_args.prototype = {}
Hbase_mutateRow_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size109 = 0
          var rtmp3
          this.mutations = []
          var _etype112 = 0
          rtmp3 = input.readListBegin()
          _etype112 = rtmp3.etype
          _size109 = rtmp3.size
          for (var _i113 = 0; _i113 < _size109; ++_i113)
          {
            var elem114 = null
            elem114 = new ttypes.Mutation()
            elem114.read(input)
            this.mutations.push(elem114)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRow_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRow_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length)
      {
        for(var iter115 in this.mutations)
        {
          if (this.mutations.hasOwnProperty(iter115))
          {
            iter115=this.mutations[iter115]
            iter115.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRow_result = function(args){
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_mutateRow_result.prototype = {}
Hbase_mutateRow_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRow_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRow_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRowTs_args = function(args){
  this.tableName = null
  this.row = null
  this.mutations = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.mutations)
  this.mutations = args.mutations
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_mutateRowTs_args.prototype = {}
Hbase_mutateRowTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size116 = 0
          var rtmp3
          this.mutations = []
          var _etype119 = 0
          rtmp3 = input.readListBegin()
          _etype119 = rtmp3.etype
          _size116 = rtmp3.size
          for (var _i120 = 0; _i120 < _size116; ++_i120)
          {
            var elem121 = null
            elem121 = new ttypes.Mutation()
            elem121.read(input)
            this.mutations.push(elem121)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRowTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRowTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.mutations) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length)
      {
        for(var iter122 in this.mutations)
        {
          if (this.mutations.hasOwnProperty(iter122))
          {
            iter122=this.mutations[iter122]
            iter122.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRowTs_result = function(args){
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_mutateRowTs_result.prototype = {}
Hbase_mutateRowTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRowTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRowTs_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRows_args = function(args){
  this.tableName = null
  this.rowBatches = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.rowBatches)
  this.rowBatches = args.rowBatches
}}
Hbase_mutateRows_args.prototype = {}
Hbase_mutateRows_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size123 = 0
          var rtmp3
          this.rowBatches = []
          var _etype126 = 0
          rtmp3 = input.readListBegin()
          _etype126 = rtmp3.etype
          _size123 = rtmp3.size
          for (var _i127 = 0; _i127 < _size123; ++_i127)
          {
            var elem128 = null
            elem128 = new ttypes.BatchMutation()
            elem128.read(input)
            this.rowBatches.push(elem128)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRows_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRows_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.rowBatches) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length)
      {
        for(var iter129 in this.rowBatches)
        {
          if (this.rowBatches.hasOwnProperty(iter129))
          {
            iter129=this.rowBatches[iter129]
            iter129.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRows_result = function(args){
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_mutateRows_result.prototype = {}
Hbase_mutateRows_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRows_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRows_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRowsTs_args = function(args){
  this.tableName = null
  this.rowBatches = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.rowBatches)
  this.rowBatches = args.rowBatches
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_mutateRowsTs_args.prototype = {}
Hbase_mutateRowsTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.LIST) {
        {
          var _size130 = 0
          var rtmp3
          this.rowBatches = []
          var _etype133 = 0
          rtmp3 = input.readListBegin()
          _etype133 = rtmp3.etype
          _size130 = rtmp3.size
          for (var _i134 = 0; _i134 < _size130; ++_i134)
          {
            var elem135 = null
            elem135 = new ttypes.BatchMutation()
            elem135.read(input)
            this.rowBatches.push(elem135)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRowsTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRowsTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.rowBatches) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length)
      {
        for(var iter136 in this.rowBatches)
        {
          if (this.rowBatches.hasOwnProperty(iter136))
          {
            iter136=this.rowBatches[iter136]
            iter136.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_mutateRowsTs_result = function(args){
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_mutateRowsTs_result.prototype = {}
Hbase_mutateRowsTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_mutateRowsTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_mutateRowsTs_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_atomicIncrement_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
  this.value = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
  if (null != args.value)
  this.value = args.value
}}
Hbase_atomicIncrement_args.prototype = {}
Hbase_atomicIncrement_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_atomicIncrement_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_atomicIncrement_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  if (null != this.value) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4)
    output.writeI64(this.value)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_atomicIncrement_result = function(args){
  this.success = null
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_atomicIncrement_result.prototype = {}
Hbase_atomicIncrement_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_atomicIncrement_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_atomicIncrement_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0)
    output.writeI64(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAll_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
}}
Hbase_deleteAll_args.prototype = {}
Hbase_deleteAll_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAll_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAll_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAll_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_deleteAll_result.prototype = {}
Hbase_deleteAll_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAll_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAll_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllTs_args = function(args){
  this.tableName = null
  this.row = null
  this.column = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.column)
  this.column = args.column
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_deleteAllTs_args.prototype = {}
Hbase_deleteAllTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.column) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3)
    output.writeString(this.column)
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllTs_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_deleteAllTs_result.prototype = {}
Hbase_deleteAllTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllTs_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllRow_args = function(args){
  this.tableName = null
  this.row = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
}}
Hbase_deleteAllRow_args.prototype = {}
Hbase_deleteAllRow_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllRow_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllRow_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllRow_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_deleteAllRow_result.prototype = {}
Hbase_deleteAllRow_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllRow_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllRow_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllRowTs_args = function(args){
  this.tableName = null
  this.row = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.row)
  this.row = args.row
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_deleteAllRowTs_args.prototype = {}
Hbase_deleteAllRowTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllRowTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllRowTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.row) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2)
    output.writeString(this.row)
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_deleteAllRowTs_result = function(args){
  this.io = null
if( args != null ){  if (null != args.io)
  this.io = args.io
}}
Hbase_deleteAllRowTs_result.prototype = {}
Hbase_deleteAllRowTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_deleteAllRowTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_deleteAllRowTs_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpen_args = function(args){
  this.tableName = null
  this.startRow = null
  this.columns = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.startRow)
  this.startRow = args.startRow
  if (null != args.columns)
  this.columns = args.columns
}}
Hbase_scannerOpen_args.prototype = {}
Hbase_scannerOpen_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size137 = 0
          var rtmp3
          this.columns = []
          var _etype140 = 0
          rtmp3 = input.readListBegin()
          _etype140 = rtmp3.etype
          _size137 = rtmp3.size
          for (var _i141 = 0; _i141 < _size137; ++_i141)
          {
            var elem142 = null
            elem142 = input.readString()
            this.columns.push(elem142)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpen_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpen_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2)
    output.writeString(this.startRow)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter143 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter143))
          {
            iter143=this.columns[iter143]
            output.writeString(iter143)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpen_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_scannerOpen_result.prototype = {}
Hbase_scannerOpen_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpen_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpen_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithStop_args = function(args){
  this.tableName = null
  this.startRow = null
  this.stopRow = null
  this.columns = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.startRow)
  this.startRow = args.startRow
  if (null != args.stopRow)
  this.stopRow = args.stopRow
  if (null != args.columns)
  this.columns = args.columns
}}
Hbase_scannerOpenWithStop_args.prototype = {}
Hbase_scannerOpenWithStop_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size144 = 0
          var rtmp3
          this.columns = []
          var _etype147 = 0
          rtmp3 = input.readListBegin()
          _etype147 = rtmp3.etype
          _size144 = rtmp3.size
          for (var _i148 = 0; _i148 < _size144; ++_i148)
          {
            var elem149 = null
            elem149 = input.readString()
            this.columns.push(elem149)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithStop_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithStop_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2)
    output.writeString(this.startRow)
    output.writeFieldEnd()
  }
  if (null != this.stopRow) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3)
    output.writeString(this.stopRow)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter150 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter150))
          {
            iter150=this.columns[iter150]
            output.writeString(iter150)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithStop_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_scannerOpenWithStop_result.prototype = {}
Hbase_scannerOpenWithStop_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithStop_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithStop_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithPrefix_args = function(args){
  this.tableName = null
  this.startAndPrefix = null
  this.columns = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.startAndPrefix)
  this.startAndPrefix = args.startAndPrefix
  if (null != args.columns)
  this.columns = args.columns
}}
Hbase_scannerOpenWithPrefix_args.prototype = {}
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size151 = 0
          var rtmp3
          this.columns = []
          var _etype154 = 0
          rtmp3 = input.readListBegin()
          _etype154 = rtmp3.etype
          _size151 = rtmp3.size
          for (var _i155 = 0; _i155 < _size151; ++_i155)
          {
            var elem156 = null
            elem156 = input.readString()
            this.columns.push(elem156)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.startAndPrefix) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2)
    output.writeString(this.startAndPrefix)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter157 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter157))
          {
            iter157=this.columns[iter157]
            output.writeString(iter157)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithPrefix_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_scannerOpenWithPrefix_result.prototype = {}
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenTs_args = function(args){
  this.tableName = null
  this.startRow = null
  this.columns = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.startRow)
  this.startRow = args.startRow
  if (null != args.columns)
  this.columns = args.columns
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_scannerOpenTs_args.prototype = {}
Hbase_scannerOpenTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.LIST) {
        {
          var _size158 = 0
          var rtmp3
          this.columns = []
          var _etype161 = 0
          rtmp3 = input.readListBegin()
          _etype161 = rtmp3.etype
          _size158 = rtmp3.size
          for (var _i162 = 0; _i162 < _size158; ++_i162)
          {
            var elem163 = null
            elem163 = input.readString()
            this.columns.push(elem163)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2)
    output.writeString(this.startRow)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter164 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter164))
          {
            iter164=this.columns[iter164]
            output.writeString(iter164)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenTs_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_scannerOpenTs_result.prototype = {}
Hbase_scannerOpenTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenTs_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithStopTs_args = function(args){
  this.tableName = null
  this.startRow = null
  this.stopRow = null
  this.columns = null
  this.timestamp = null
if( args != null ){  if (null != args.tableName)
  this.tableName = args.tableName
  if (null != args.startRow)
  this.startRow = args.startRow
  if (null != args.stopRow)
  this.stopRow = args.stopRow
  if (null != args.columns)
  this.columns = args.columns
  if (null != args.timestamp)
  this.timestamp = args.timestamp
}}
Hbase_scannerOpenWithStopTs_args.prototype = {}
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.LIST) {
        {
          var _size165 = 0
          var rtmp3
          this.columns = []
          var _etype168 = 0
          rtmp3 = input.readListBegin()
          _etype168 = rtmp3.etype
          _size165 = rtmp3.size
          for (var _i169 = 0; _i169 < _size165; ++_i169)
          {
            var elem170 = null
            elem170 = input.readString()
            this.columns.push(elem170)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args')
  if (null != this.tableName) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1)
    output.writeString(this.tableName)
    output.writeFieldEnd()
  }
  if (null != this.startRow) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2)
    output.writeString(this.startRow)
    output.writeFieldEnd()
  }
  if (null != this.stopRow) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3)
    output.writeString(this.stopRow)
    output.writeFieldEnd()
  }
  if (null != this.columns) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4)
    {
      output.writeListBegin(Thrift.Type.STRING, this.columns.length)
      {
        for(var iter171 in this.columns)
        {
          if (this.columns.hasOwnProperty(iter171))
          {
            iter171=this.columns[iter171]
            output.writeString(iter171)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerOpenWithStopTs_result = function(args){
  this.success = null
  this.io = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
}}
Hbase_scannerOpenWithStopTs_result.prototype = {}
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0)
    output.writeI32(this.success)
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerGet_args = function(args){
  this.id = null
if( args != null ){  if (null != args.id)
  this.id = args.id
}}
Hbase_scannerGet_args.prototype = {}
Hbase_scannerGet_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerGet_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerGet_args')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerGet_result = function(args){
  this.success = null
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_scannerGet_result.prototype = {}
Hbase_scannerGet_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size172 = 0
          var rtmp3
          this.success = []
          var _etype175 = 0
          rtmp3 = input.readListBegin()
          _etype175 = rtmp3.etype
          _size172 = rtmp3.size
          for (var _i176 = 0; _i176 < _size172; ++_i176)
          {
            var elem177 = null
            elem177 = new ttypes.TRowResult()
            elem177.read(input)
            this.success.push(elem177)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerGet_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerGet_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter178 in this.success)
        {
          if (this.success.hasOwnProperty(iter178))
          {
            iter178=this.success[iter178]
            iter178.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerGetList_args = function(args){
  this.id = null
  this.nbRows = null
if( args != null ){  if (null != args.id)
  this.id = args.id
  if (null != args.nbRows)
  this.nbRows = args.nbRows
}}
Hbase_scannerGetList_args.prototype = {}
Hbase_scannerGetList_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerGetList_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerGetList_args')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  if (null != this.nbRows) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2)
    output.writeI32(this.nbRows)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerGetList_result = function(args){
  this.success = null
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.success)
  this.success = args.success
  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_scannerGetList_result.prototype = {}
Hbase_scannerGetList_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 0:      if (ftype == Thrift.Type.LIST) {
        {
          var _size179 = 0
          var rtmp3
          this.success = []
          var _etype182 = 0
          rtmp3 = input.readListBegin()
          _etype182 = rtmp3.etype
          _size179 = rtmp3.size
          for (var _i183 = 0; _i183 < _size179; ++_i183)
          {
            var elem184 = null
            elem184 = new ttypes.TRowResult()
            elem184.read(input)
            this.success.push(elem184)
          }
          input.readListEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerGetList_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerGetList_result')
  if (null != this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    {
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
      {
        for(var iter185 in this.success)
        {
          if (this.success.hasOwnProperty(iter185))
          {
            iter185=this.success[iter185]
            iter185.write(output)
          }
        }
      }
      output.writeListEnd()
    }
    output.writeFieldEnd()
  }
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerClose_args = function(args){
  this.id = null
if( args != null ){  if (null != args.id)
  this.id = args.id
}}
Hbase_scannerClose_args.prototype = {}
Hbase_scannerClose_args.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerClose_args.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerClose_args')
  if (null != this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1)
    output.writeI32(this.id)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var Hbase_scannerClose_result = function(args){
  this.io = null
  this.ia = null
if( args != null ){  if (null != args.io)
  this.io = args.io
  if (null != args.ia)
  this.ia = args.ia
}}
Hbase_scannerClose_result.prototype = {}
Hbase_scannerClose_result.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError()
        this.io.read(input)
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument()
        this.ia.read(input)
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

Hbase_scannerClose_result.prototype.write = function(output){ 
  output.writeStructBegin('Hbase_scannerClose_result')
  if (null != this.io) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1)
    this.io.write(output)
    output.writeFieldEnd()
  }
  if (null != this.ia) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2)
    this.ia.write(output)
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

var HbaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {}
}
HbaseClient.prototype = {}
HbaseClient.prototype.enableTable = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_enableTable(tableName)
}

HbaseClient.prototype.send_enableTable = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_enableTable_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_enableTable_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.disableTable = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_disableTable(tableName)
}

HbaseClient.prototype.send_disableTable = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_disableTable_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_disableTable_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.isTableEnabled = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_isTableEnabled(tableName)
}

HbaseClient.prototype.send_isTableEnabled = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_isTableEnabled_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("isTableEnabled failed: unknown result");
}
HbaseClient.prototype.compact = function(tableNameOrRegionName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_compact(tableNameOrRegionName)
}

HbaseClient.prototype.send_compact = function(tableNameOrRegionName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_compact_args()
  args.tableNameOrRegionName = tableNameOrRegionName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_compact_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.majorCompact = function(tableNameOrRegionName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_majorCompact(tableNameOrRegionName)
}

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_majorCompact_args()
  args.tableNameOrRegionName = tableNameOrRegionName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_majorCompact_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.getTableNames = function(callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getTableNames()
}

HbaseClient.prototype.send_getTableNames = function(){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getTableNames_args()
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getTableNames_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getTableNames failed: unknown result");
}
HbaseClient.prototype.getColumnDescriptors = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getColumnDescriptors(tableName)
}

HbaseClient.prototype.send_getColumnDescriptors = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getColumnDescriptors_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getColumnDescriptors failed: unknown result");
}
HbaseClient.prototype.getTableRegions = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getTableRegions(tableName)
}

HbaseClient.prototype.send_getTableRegions = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getTableRegions_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getTableRegions failed: unknown result");
}
HbaseClient.prototype.createTable = function(tableName,columnFamilies,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_createTable(tableName, columnFamilies)
}

HbaseClient.prototype.send_createTable = function(tableName,columnFamilies){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_createTable_args()
  args.tableName = tableName
  args.columnFamilies = columnFamilies
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_createTable_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  if (null != result.exist) {
    return callback(result.exist);
  }
  callback(null)
}
HbaseClient.prototype.deleteTable = function(tableName,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteTable(tableName)
}

HbaseClient.prototype.send_deleteTable = function(tableName){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_deleteTable_args()
  args.tableName = tableName
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_deleteTable_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.get = function(tableName,row,column,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_get(tableName, row, column)
}

HbaseClient.prototype.send_get = function(tableName,row,column){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_get_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_get = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_get_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("get failed: unknown result");
}
HbaseClient.prototype.getVer = function(tableName,row,column,numVersions,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getVer(tableName, row, column, numVersions)
}

HbaseClient.prototype.send_getVer = function(tableName,row,column,numVersions){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getVer_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.numVersions = numVersions
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getVer_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getVer failed: unknown result");
}
HbaseClient.prototype.getVerTs = function(tableName,row,column,timestamp,numVersions,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getVerTs(tableName, row, column, timestamp, numVersions)
}

HbaseClient.prototype.send_getVerTs = function(tableName,row,column,timestamp,numVersions){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getVerTs_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.timestamp = timestamp
  args.numVersions = numVersions
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getVerTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getVerTs failed: unknown result");
}
HbaseClient.prototype.getRow = function(tableName,row,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRow(tableName, row)
}

HbaseClient.prototype.send_getRow = function(tableName,row){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getRow_args()
  args.tableName = tableName
  args.row = row
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getRow_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getRow failed: unknown result");
}
HbaseClient.prototype.getRowWithColumns = function(tableName,row,columns,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowWithColumns(tableName, row, columns)
}

HbaseClient.prototype.send_getRowWithColumns = function(tableName,row,columns){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getRowWithColumns_args()
  args.tableName = tableName
  args.row = row
  args.columns = columns
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getRowWithColumns failed: unknown result");
}
HbaseClient.prototype.getRowTs = function(tableName,row,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowTs(tableName, row, timestamp)
}

HbaseClient.prototype.send_getRowTs = function(tableName,row,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getRowTs_args()
  args.tableName = tableName
  args.row = row
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getRowTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getRowTs failed: unknown result");
}
HbaseClient.prototype.getRowWithColumnsTs = function(tableName,row,columns,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_getRowWithColumnsTs(tableName, row, columns, timestamp)
}

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName,row,columns,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_getRowWithColumnsTs_args()
  args.tableName = tableName
  args.row = row
  args.columns = columns
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("getRowWithColumnsTs failed: unknown result");
}
HbaseClient.prototype.mutateRow = function(tableName,row,mutations,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRow(tableName, row, mutations)
}

HbaseClient.prototype.send_mutateRow = function(tableName,row,mutations){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_mutateRow_args()
  args.tableName = tableName
  args.row = row
  args.mutations = mutations
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_mutateRow_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  callback(null)
}
HbaseClient.prototype.mutateRowTs = function(tableName,row,mutations,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRowTs(tableName, row, mutations, timestamp)
}

HbaseClient.prototype.send_mutateRowTs = function(tableName,row,mutations,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_mutateRowTs_args()
  args.tableName = tableName
  args.row = row
  args.mutations = mutations
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  callback(null)
}
HbaseClient.prototype.mutateRows = function(tableName,rowBatches,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRows(tableName, rowBatches)
}

HbaseClient.prototype.send_mutateRows = function(tableName,rowBatches){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_mutateRows_args()
  args.tableName = tableName
  args.rowBatches = rowBatches
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_mutateRows_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  callback(null)
}
HbaseClient.prototype.mutateRowsTs = function(tableName,rowBatches,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_mutateRowsTs(tableName, rowBatches, timestamp)
}

HbaseClient.prototype.send_mutateRowsTs = function(tableName,rowBatches,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_mutateRowsTs_args()
  args.tableName = tableName
  args.rowBatches = rowBatches
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  callback(null)
}
HbaseClient.prototype.atomicIncrement = function(tableName,row,column,value,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_atomicIncrement(tableName, row, column, value)
}

HbaseClient.prototype.send_atomicIncrement = function(tableName,row,column,value){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_atomicIncrement_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.value = value
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("atomicIncrement failed: unknown result");
}
HbaseClient.prototype.deleteAll = function(tableName,row,column,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAll(tableName, row, column)
}

HbaseClient.prototype.send_deleteAll = function(tableName,row,column){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_deleteAll_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_deleteAll_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.deleteAllTs = function(tableName,row,column,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllTs(tableName, row, column, timestamp)
}

HbaseClient.prototype.send_deleteAllTs = function(tableName,row,column,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_deleteAllTs_args()
  args.tableName = tableName
  args.row = row
  args.column = column
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.deleteAllRow = function(tableName,row,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllRow(tableName, row)
}

HbaseClient.prototype.send_deleteAllRow = function(tableName,row){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_deleteAllRow_args()
  args.tableName = tableName
  args.row = row
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.deleteAllRowTs = function(tableName,row,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_deleteAllRowTs(tableName, row, timestamp)
}

HbaseClient.prototype.send_deleteAllRowTs = function(tableName,row,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_deleteAllRowTs_args()
  args.tableName = tableName
  args.row = row
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  callback(null)
}
HbaseClient.prototype.scannerOpen = function(tableName,startRow,columns,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpen(tableName, startRow, columns)
}

HbaseClient.prototype.send_scannerOpen = function(tableName,startRow,columns){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerOpen_args()
  args.tableName = tableName
  args.startRow = startRow
  args.columns = columns
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerOpen failed: unknown result");
}
HbaseClient.prototype.scannerOpenWithStop = function(tableName,startRow,stopRow,columns,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns)
}

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName,startRow,stopRow,columns){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerOpenWithStop_args()
  args.tableName = tableName
  args.startRow = startRow
  args.stopRow = stopRow
  args.columns = columns
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerOpenWithStop failed: unknown result");
}
HbaseClient.prototype.scannerOpenWithPrefix = function(tableName,startAndPrefix,columns,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns)
}

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName,startAndPrefix,columns){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerOpenWithPrefix_args()
  args.tableName = tableName
  args.startAndPrefix = startAndPrefix
  args.columns = columns
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerOpenWithPrefix failed: unknown result");
}
HbaseClient.prototype.scannerOpenTs = function(tableName,startRow,columns,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenTs(tableName, startRow, columns, timestamp)
}

HbaseClient.prototype.send_scannerOpenTs = function(tableName,startRow,columns,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerOpenTs_args()
  args.tableName = tableName
  args.startRow = startRow
  args.columns = columns
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerOpenTs failed: unknown result");
}
HbaseClient.prototype.scannerOpenWithStopTs = function(tableName,startRow,stopRow,columns,timestamp,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp)
}

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName,startRow,stopRow,columns,timestamp){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerOpenWithStopTs_args()
  args.tableName = tableName
  args.startRow = startRow
  args.stopRow = stopRow
  args.columns = columns
  args.timestamp = timestamp
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerOpenWithStopTs failed: unknown result");
}
HbaseClient.prototype.scannerGet = function(id,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerGet(id)
}

HbaseClient.prototype.send_scannerGet = function(id){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerGet_args()
  args.id = id
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerGet_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerGet failed: unknown result");
}
HbaseClient.prototype.scannerGetList = function(id,nbRows,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerGetList(id, nbRows)
}

HbaseClient.prototype.send_scannerGetList = function(id,nbRows){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerGetList_args()
  args.id = id
  args.nbRows = nbRows
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  if (null != result.success ) {
    return callback(null, result.success);
  }
  return callback("scannerGetList failed: unknown result");
}
HbaseClient.prototype.scannerClose = function(id,callback){
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
    this.send_scannerClose(id)
}

HbaseClient.prototype.send_scannerClose = function(id){
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid)
  var args = new Hbase_scannerClose_args()
  args.id = id
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid){
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x);
  }
  var result = new Hbase_scannerClose_result()
  result.read(input)
  input.readMessageEnd()

  if (null != result.io) {
    return callback(result.io);
  }
  if (null != result.ia) {
    return callback(result.ia);
  }
  callback(null)
}
var HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_enableTable_result()
  this._handler.enableTable(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_disableTable_result()
  this._handler.disableTable(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_isTableEnabled_result()
  this._handler.isTableEnabled(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_compact_result()
  this._handler.compact(args.tableNameOrRegionName, function(success) {
    result.success = success
    output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_majorCompact_result()
  this._handler.majorCompact(args.tableNameOrRegionName, function(success) {
    result.success = success
    output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getTableNames_result()
  this._handler.getTableNames(function(success) {
    result.success = success
    output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getColumnDescriptors_result()
  this._handler.getColumnDescriptors(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getTableRegions_result()
  this._handler.getTableRegions(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_createTable_result()
  this._handler.createTable(args.tableName, args.columnFamilies, function(success) {
    result.success = success
    output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_deleteTable_result()
  this._handler.deleteTable(args.tableName, function(success) {
    result.success = success
    output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_get_result()
  this._handler.get(args.tableName, args.row, args.column, function(success) {
    result.success = success
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getVer_result()
  this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, function(success) {
    result.success = success
    output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getVerTs_result()
  this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, function(success) {
    result.success = success
    output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getRow_result()
  this._handler.getRow(args.tableName, args.row, function(success) {
    result.success = success
    output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getRowWithColumns_result()
  this._handler.getRowWithColumns(args.tableName, args.row, args.columns, function(success) {
    result.success = success
    output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getRowTs_result()
  this._handler.getRowTs(args.tableName, args.row, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_getRowWithColumnsTs_result()
  this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_mutateRow_result()
  this._handler.mutateRow(args.tableName, args.row, args.mutations, function(success) {
    result.success = success
    output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_mutateRowTs_result()
  this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_mutateRows_result()
  this._handler.mutateRows(args.tableName, args.rowBatches, function(success) {
    result.success = success
    output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_mutateRowsTs_result()
  this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_atomicIncrement_result()
  this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value, function(success) {
    result.success = success
    output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_deleteAll_result()
  this._handler.deleteAll(args.tableName, args.row, args.column, function(success) {
    result.success = success
    output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_deleteAllTs_result()
  this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_deleteAllRow_result()
  this._handler.deleteAllRow(args.tableName, args.row, function(success) {
    result.success = success
    output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_deleteAllRowTs_result()
  this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerOpen_result()
  this._handler.scannerOpen(args.tableName, args.startRow, args.columns, function(success) {
    result.success = success
    output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerOpenWithStop_result()
  this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, function(success) {
    result.success = success
    output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerOpenWithPrefix_result()
  this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, function(success) {
    result.success = success
    output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerOpenTs_result()
  this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerOpenWithStopTs_result()
  this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, function(success) {
    result.success = success
    output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerGet_result()
  this._handler.scannerGet(args.id, function(success) {
    result.success = success
    output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerGetList_result()
  this._handler.scannerGetList(args.id, args.nbRows, function(success) {
    result.success = success
    output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args()
  args.read(input)
  input.readMessageEnd()
  var result = new Hbase_scannerClose_result()
  this._handler.scannerClose(args.id, function(success) {
    result.success = success
    output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

